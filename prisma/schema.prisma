generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     UserRole @default(USER)
  verified DateTime

  provider   String?
  providerId String?

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
  favorites        Favorite[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String
  price    Int

  ingredients Ingredient[]
  items       ProductItem[]
  favorites   Favorite[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([categoryId]) // Добавлен индекс для categoryId
}

model ProductItem {
  id Int @id @default(autoincrement())

  price Int
  size  Int?
  type  Int

  cartItems CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([productId]) // Добавлен индекс для productId
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  items CartItem[]

  token String @default("")

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId]) // Добавлен индекс для userId
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([productItemId]) // Добавлен индекс для productItemId
  @@index([cartId]) // Добавлен индекс для cartId
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  items Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([userId]) // Добавлен индекс для userId
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}